name: Tests

on: 
  workflow_call:
    inputs:
      branch_ref:
        required: true
        type: string
    secrets:
      MAILJET_API_KEY:
        required: true
      MAILJET_SECRET_KEY:
        required: true
      BASE_EMAIL:
        required: true

env:
  POSTGRES_USER: 'postgres'
  POSTGRES_PASSWORD: 'postgres'
  POSTGRES_DB: 'postgres'
  POSTGRES_TEST_DB: 'postgres'
  REDIS_URI: 'redis://localhost:6379/0'
  TEST_REDIS_URI: 'redis://localhost:6379/1'
  SELENIUM_URL: 'http://selenium:4444/wd/hub'

jobs:
  Tests:
    env:
      FLASK_DEBUG: 'false'
      PRODUCTION: 'false'
      SECRET_KEY: 'ABCDEFGH12345678'
      MAILJET_API_KEY: ${{ secrets.MAILJET_API_KEY }}
      MAILJET_SECRET_KEY: ${{ secrets.MAILJET_SECRET_KEY }}
      BASE_EMAIL: ${{ secrets.BASE_EMAIL }}

    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    timeout-minutes: 10

    # Splits tests into multiple workers
    strategy:
      matrix:
        worker:
          - [1, 'Unit Tests']
          - [2, 'Splash Integration Tests']
          - [3, 'UTub Integration Tests']
          - [4, 'UTub Member Integration Tests']
          - [5, 'UTub URL Integration Tests']
          - [6, 'UTub Tags Integration Tests']
          - [7, 'CLI Integration Tests']
          - [8, 'UI Splash Functional Tests']
          - [9, 'UI Home Functional Tests']
          - [10, 'UI UTub Functional Tests']
          - [11, 'UI Member Functional Tests']
          - [12, 'UI UTub URL Functional Tests']
          - [13, 'UI UTub Tags Functional Tests']
          - [14, 'UI Mobile Functional Tests']

    name: ${{ format('{0}', matrix.worker[1]) }}

    # Service containers to run with `Run-Tests`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: 'postgres:16.3-bookworm'
        # Map the ports
        ports:
          - 5432:5432
        # Provide the password for postgres
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
      # Redis service configuration
      redis:
        image: 'redis:6.2.16-alpine'
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping | grep PONG || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch_ref }}

      # ðŸ‘‡ We need to set up the env vars from values taken from the matrix
      - name: Set up worker env vars
        run: |
          echo "GITHUB_WORKER_ID=${{matrix.worker[0]}}" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.9'
          cache: 'pip'
          cache-dependency-path: '**/requirements/requirements-test.txt'
      
      - name: Setup caching
        uses: actions/cache@master
        id: cache
        with:
          path: ${{ env.pythonLocation }}/lib/python3.11/site-packages/*
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/requirements-test.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      
      - name: Install Dependencies
        run: |
          python3.11 -m pip install --upgrade pip;
          pip install -r requirements/requirements-test.txt;

      - name: Run tests
        env:
          DATABASE_URL_TEST: postgresql://postgres:postgres@localhost:${{ job.services.postgres.ports['5432'] }}/postgres
        timeout-minutes: 10
        run: |
          python3.11 -m pytest 
