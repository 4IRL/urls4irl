
name: Deploy to production server

on:
  workflow_call:
    inputs:
      branch_ref:
        required: true
        type: string
    secrets:
      PROD_SSH_HOST:
        required: true
      PROD_SSH_USERNAME:
        required: true
      PROD_SSH_PRIVATE_KEY_FILENAME:
        required: true
      PROD_SSH_PRIVATE_KEY_VALUE:
        required: true
      PROD_SERVICE_TOKEN_ID:
        required: true
      PROD_SERVICE_TOKEN_SECRET:
        required: true
      PROD_DB_NAME:
        required: true
      PROD_DB_USER:
        required: true
      PROD_DB_PASSWORD:
        required: true
      PROD_LOG_DIRECTORY:
        required: true
      REDIS_PASSWORD:
        required: true
      MAILJET_API_KEY:
        required: true
      MAILJET_SECRET_KEY:
        required: true
      BASE_EMAIL:
        required: true
      SECRET_KEY:
        required: true
      NOTIFICATION_URL:
        required: true

jobs:
    ProdDeploy:
        name: Deploy docker compose stack to production server
        runs-on: ubuntu-latest

        steps:
          - name: Install SSH
            run: |
              mkdir -p ~/.ssh
              echo "${{ secrets.PROD_SSH_PRIVATE_KEY_VALUE }}" > ~/.ssh/${{ secrets.PROD_SSH_PRIVATE_KEY_FILENAME }}
              chmod 600 ~/.ssh/${{ secrets.PROD_SSH_PRIVATE_KEY_FILENAME }}

          - name: Install Cloudflared
            run: |
              sudo curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o /usr/bin/cloudflared
              sudo chmod a+x /usr/bin/cloudflared

          # Special config file required for cloudflared tunnel ssh connection
          - name: Prepare SSH Config file
            run: |
              cat <<EOF > ~/.ssh/config
              Host ${{ secrets.PROD_SSH_HOST }}
                HostName ${{secrets.PROD_SSH_HOST }}
                User ${{ secrets.PROD_SSH_USERNAME }}
                IdentityFile ~/.ssh/${{ secrets.PROD_SSH_PRIVATE_KEY_FILENAME }}
                IdentitiesOnly yes
                AddKeysToAgent yes
                ProxyCommand /usr/bin/cloudflared access ssh --hostname %h --id ${{ secrets.PROD_SERVICE_TOKEN_ID }} --secret ${{ secrets.PROD_SERVICE_TOKEN_SECRET }}
              EOF

              chmod 600 ~/.ssh/config

          - name: Checkout code
            uses: actions/checkout@v4
            with:
              ref: ${{ inputs.branch_ref }}

          - name: SCP Compose File Into Production Server
            run: |
              scp -T -q -o StrictHostKeyChecking=no docker/compose.yaml ${{ secrets.PROD_SSH_HOST }}:/home/u4i/

          # Pull updated images, recreate if needed, run as daemon, and prune old images
          - name: Build Docker Network
            run: |
              ssh -T -q -o StrictHostKeyChecking=no ${{ secrets.PROD_SSH_HOST }} '
              cd /home/u4i/;
              docker logs --since=24h u4i-prod-flask &> "${{ secrets.PROD_LOG_DIRECTORY }}log_$(date +%Y%m%d_%H%M%S).txt";
              echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin;
              docker compose -f compose.yaml pull;
              mkdir -p ./secrets/;
              chmod 700 ./secrets/;
              echo "${{ secrets.PROD_DB_USER }}" > ./secrets/POSTGRES_USER;
              echo "${{ secrets.PROD_DB_NAME }}" > ./secrets/POSTGRES_DB;
              echo "${{ secrets.PROD_DB_PASSWORD }}" > ./secrets/POSTGRES_PASSWORD;
              echo "${{ secrets.REDIS_PASSWORD }}" > ./secrets/REDIS_PASSWORD;
              echo "${{ secrets.MAILJET_API_KEY }}" > ./secrets/MAILJET_API_KEY;
              echo "${{ secrets.MAILJET_SECRET_KEY }}" > ./secrets/MAILJET_SECRET_KEY;
              echo "${{ secrets.BASE_EMAIL }}" > ./secrets/BASE_EMAIL;
              echo "${{ secrets.NOTIFICATION_URL }}" > ./secrets/NOTIFICATION_URL;
              echo "$(openssl rand 64 | base64 --wrap=0 | tr -d '+')" > ./secrets/SECRET_KEY;
              docker compose -f compose.yaml up --build -d;
              rm -rf ./secrets/;
              docker image prune -f;
              docker exec u4i-prod-flask tar -cf - -C /code/u4i/src static | tar -xf -;

              echo "Waiting for bundled JS file to be built...";
              for i in {1..30}; do
                if docker exec u4i-prod-flask ls /code/u4i/src/gen/logged_in.js &> /dev/null; then
                  echo "Bundled JS file built! Copying to host...";
                  break
                fi
              echo "Waiting.... (attempt $i of 30)";
              sleep 5;
              done

              docker exec u4i-prod-flask tar -cf - -C /code/u4i/src/gen logged_in.js | tar -xf - -C /home/u4i/static;

              echo "Cleaning up docker login files..."
              rm -f ~/.docker/config.json
              ';
              sleep 30;
          
          # Verify the three services are up and running after any updates
          - name: Verify Docker Network
            run: >
              ssh -T -q -o StrictHostKeyChecking=no ${{ secrets.PROD_SSH_HOST }} '
              cd /home/u4i/;
              hasRedis=$(docker compose -f compose.yaml ps --services --filter "status=running" | grep redis);
              hasDB=$(docker compose -f compose.yaml ps --services --filter "status=running" | grep db);
              hasWeb=$(docker compose -f compose.yaml ps --services --filter "status=running" | grep web);
              hasWorkflow=$(docker compose -f compose.yaml ps --services --filter "status=running" | grep workflow);

              if [ -n "${hasRedis}" ] && [ -n "${hasDB}" ] && [ -n "${hasWeb}" ] && [ -n "${hasWorkflow}" ]; then
                echo "After 30 seconds, all of the services are up!";
                exit 0; 
              else
                echo "After 30 seconds, one or more of the services is not up: ";
                [ "redis" != "${hasRedis}" ] && echo "Redis not operational"; 
                [ "db" != "${hasDB}" ] && echo "Database not operational"; 
                [ "web" != "${hasWeb}" ] && echo "Web service not operational";
                [ "workflow" != "${hasWorkflow}" ] && echo "Workflow service not operational";
                exit 1;
              fi; 
              '
