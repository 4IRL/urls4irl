
name: Deploy to production server

on:
  workflow_call:
    inputs:
      branch_ref:
        required: true
        type: string
    secrets:
      PROD_SSH_HOST:
        required: true
      PROD_SSH_USERNAME:
        required: true
      PROD_SSH_PRIVATE_KEY_FILENAME:
        required: true
      PROD_SSH_PRIVATE_KEY_VALUE:
        required: true
      PROD_SERVICE_TOKEN_ID:
        required: true
      PROD_SERVICE_TOKEN_SECRET:
        required: true
      PROD_DB_NAME:
        required: true
      PROD_DB_USER:
        required: true
      PROD_DB_PASSWORD:
        required: true
      REDIS_PASSWORD:
        required: true
      MAILJET_API_KEY:
        required: true
      MAILJET_SECRET_KEY:
        required: true
      BASE_EMAIL:
        required: true
      SECRET_KEY:
        required: true

jobs:
    ProdDeploy:
        name: Deploy docker image to production server
        runs-on: ubuntu-latest

        steps:
          - name: Install SSH
            run: |
              mkdir -p ~/.ssh
              echo "${{ secrets.PROD_SSH_PRIVATE_KEY_VALUE }}" > ~/.ssh/${{ secrets.PROD_SSH_PRIVATE_KEY_FILENAME }}
              chmod 600 ~/.ssh/${{ secrets.PROD_SSH_PRIVATE_KEY_FILENAME }}

          - name: Install Cloudflared
            run: |
              sudo curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o /usr/bin/cloudflared
              sudo chmod a+x /usr/bin/cloudflared

          # Special config file required for cloudflared tunnel ssh connection
          - name: Prepare SSH Config file
            run: |
              cat <<EOF > ~/.ssh/config
              Host ${{ secrets.PROD_SSH_HOST }}
                HostName ${{secrets.PROD_SSH_HOST }}
                User ${{ secrets.PROD_SSH_USERNAME }}
                IdentityFile ~/.ssh/${{ secrets.PROD_SSH_PRIVATE_KEY_FILENAME }}
                IdentitiesOnly yes
                AddKeysToAgent yes
                ProxyCommand /usr/bin/cloudflared access ssh --hostname %h --id ${{ secrets.PROD_SERVICE_TOKEN_ID }} --secret ${{ secrets.PROD_SERVICE_TOKEN_SECRET }}
              EOF

              chmod 600 ~/.ssh/config

          - name: Checkout code
            uses: actions/checkout@v4
            with:
              ref: ${{ inputs.branch_ref }}

          - name: SCP Compose File Into Production Server
            run: |
              scp -T -q -o StrictHostKeyChecking=no compose.yaml ${{ secrets.PROD_SSH_HOST }}:/home/u4i/

          # Allow environment file to be defined by GitHub secrets
          - name: Generate Environment File
            run: |
              export KEY="$(openssl rand 64 | base64 --wrap=0 | tr -d '+')";\
              cat <<EOF > ~/.env
              POSTGRES_USER=${{ secrets.PROD_DB_USER }}
              POSTGRES_DB=${{ secrets.PROD_DB_NAME }}
              POSTGRES_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
              MAILJET_API_KEY=${{ secrets.MAILJET_API_KEY }}
              MAILJET_SECRET_KEY=${{ secrets.MAILJET_SECRET_KEY }}
              BASE_EMAIL=${{ secrets.BASE_EMAIL }}
              SECRET_KEY=$KEY
              EOF

          - name: SCP Environment File
            run: |
              scp -T -q -o StrictHostKeyChecking=no ~/.env ${{ secrets.PROD_SSH_HOST }}:/home/u4i/

